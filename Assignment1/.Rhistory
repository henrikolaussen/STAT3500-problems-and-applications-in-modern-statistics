p_se = MclustBootstrap(mod2, nboot=100, type="pb")
np_se = MclustBootstrap(mod2, nboot=100, type="bs")
summary(np_se)
p_se = MclustBootstrap(mod2, nboot = 2, type = 'pb')
knitr::opts_chunk$set(echo = TRUE)
library(mclust) #gaussian mixture models
library(ggplot2)
library(GGally)
library(siqr)
setwd("/Users/henrikolaussen/Desktop/Modern-stat/Assignments/Assignment1")
data1 <- read.csv('Data_A1a_v2.csv', header = TRUE)
mod1 <- Mclust(data = data1$x, G = 2, modelNames = 'E') #modelNames = 'E' means equal variance.
mu <- mod1$parameters$mean
proportions <- mod1$parameters$pro
variance <- mod1$parameters$variance$sigmasq
mu
proportions
plot(mod1, what = "density")
N_bins = 7 #number of bins in histogram
hist(data1$x, freq = FALSE, main = 'Histogram', breaks = N_bins, ylim = c(0,0.6))
plot(mod1, what = "density")
#cut-offs
breaks = c(-3,-2,-1,0,1,2,3,4)
bins = cut(data1$x, breaks = breaks)
Oi = table(bins)
Oi
chisq.test(Oi)
?chisq.test
mod2 <- densityMclust(data1$x,G = 2, modelNames = "V")
mod2$parameters
np_se = MclustBootstrap(mod2, nboot=100, type="bs")
summary(np_se)
p_se = MclustBootstrap(mod2, nboot = 2, type = 'pb')
?MclustBootstrap
mod2 <- Mclust(data = data1$x, G = 2, modelNames = "V")
mod2$parameters
np_se = MclustBootstrap(mod2, nboot=100, type="bs")
summary(np_se)
p_se = MclustBootstrap(mod2, nboot = 2, type = 'pb')
?MclustBootstrap
summary(p_se, what="se")
data2 <- read.csv('Data_A1b.csv', header = TRUE)
mixture_g1 = Mclust(data = data1$x, G = 1, modelNames = "E")
mixture_g2 = Mclust(data = data1$x, G = 2, modelNames = "E")
mixture_g3 = Mclust(data = data1$x, G = 3, modelNames = "E")
plot(mixture_g2)
knitr::opts_chunk$set(echo = TRUE)
library(mclust)
data("faithful", package= "datasets")
bicModel = mclustBIC(faithful)
modelFaithful = Mclust(faithful, x = bicModel)
?Mclust
parametric_se = MclustBootstrap(modelFaithful, nboot=100, type="pb")
summary(parametric_se, what="se")
non_parametric_se = MclustBootstrap(modelFaithful, nboot=100, type="bs")
summary(non_parametric_se, what="se")
knitr::opts_chunk$set(echo = TRUE)
library(mclust) #gaussian mixture models
library(ggplot2)
library(GGally)
iris_data = iris
ggpairs(iris[1:4], aes(color = iris_data$Species))
#G = number of classes
#modelnames = indicates covariance structure.
#univariate case: whether we have equal variance between components
model1 <- Mclust(iris_data$Sepal.Width, G = 3, modelnames = "E")
model1$parameters$pro #pro -> mixing prop
model1$parameters$mean
model1$parameters$variance$sigmasq #variance
iris_classification = model1$classification
#classification error:
classError(iris_classification, iris_data$Species)
data("faithful")
bicModel = mclustBIC(faithful)
#finds optimal number of parameters
#also finds optimal covariance structure.
bicModel
plot(bicModel)
modelFaithful = densityMclust(faithful, x = bicModel)
#gives the prob density estimate of the mixture model
plot(modelFaithful, what = "density", type = "image")
clPairs(faithful, modelFaithful$classification)
#plot(modelFaithful, what = "classification") -> not working.
knitr::opts_chunk$set(echo = TRUE)
library(mclust) #gaussian mixture models
library(ggplot2)
library(GGally)
library(siqr)
plot(mixture_g2, what = "density", type = "image")
clPairs(mixture_g2, modelFaithful$classification)
plot(mixture_g2, what = "density", type = "image")
clPairs(mixture_g2, mixture_g2$classification)
plot(mixture_g2, what = "density", type = "image")
plot(mixture_g3, what = 'density', type = 'image')
plot(mixture_g3, what = 'density', type = 'image')
summary(data2)
View(data2)
mixture_g1 = Mclust(data = data2, G = 1, modelNames = "E")
View(faithful)
View(data1)
View(data2)
View(faithful)
View(data2)
data[2:5]
data[2:5,]
data[,2:5]
data[:,2:5]
data2[2:5]
mixture_g1 = Mclust(data = data2[2:5], G = 1, modelNames = "E")
mixtureBIC_g1 = mclustBIC(data2[2:5])
mixtureBIC_g1 = mclustBIC(data2[2:5], G = 1)
mixtureBIC_g1 = mclustBIC(data2[2:5], G = 1)
mixtureBIC_g2 = mclustBIC(data2[2:5], G = 2)
mixtureBIC_g3 = mclustBIC(data2[2:5], G = 3)
mixtureBIC_g1
mixtureBIC_g2
mixtureBIC_g3
knitr::opts_chunk$set(echo = TRUE)
library(mclust)
#install.packages("mclust")
library(ggplot2)
library(GGally)
ggpairs(iris[1:4], aes(color=iris$Species))
#Fitting a mixture model using Mclust.
#modelnames for univariate data controls whether we have equal variance between the components or not
#E = equal variance
#V = unequal variance
model1 = Mclust(iris$Petal.Width, G = 3, modelnames="V")
#model1 = Mclust(iris$Sepal.Width, G = 3, modelnames="E")
#Get parameters
piEst = model1$parameters$pro
meanEst = model1$parameters$mean
varEst = model1$parameters$variance$sigmasq
c(piEst, meanEst,varEst)
#Get classification, have a look at z
iris_classification = model1$classification
classError(iris_classification, iris$Species) #Not bad
mclust.options("hcUse") #What data transform we are doing our initialisation on
mclust.options("hcModelName") #Co-variance assumption of the clusters.
(hc1 <- hc(iris$Sepal.Length, modelName="E", use="VARS"))
#VARS = using the original data for the initialisation method instead of transformed data
#Density estiamte for the joint distribution
model2 = densityMclust(iris$Sepal.Length, G = 3, initialisation = list(hcPairs=hc1))
piEst = model2$parameters$pro
piEst
meanEst = model2$parameters$mean
meanEst
varEst = model2$parameters$variance$sigmasq
varEst
iris_classification = model2$classification
classError(iris_classification, iris$Species) #Pretty bad
data("faithful", package = "datasets")
plot(faithful)
bicModel = mclustBIC(faithful) #Checks up to 9 models
bicModel
plot(bicModel)
#Best model looks like 3 components EEE
modelFaithful = Mclust(faithful, x = bicModel)
modelFaithfulDen = densityMclust(faithful, x = bicModel)
modelFaithful2 =  Mclust(faithful, G = 2, modeNames = "VVE")
plot(modelFaithfulDen, what = "density", type = "image")
mixture_g1 = Mclust(data = data2[2:5], G = 1, modelNames = "EEE")
mixture_g2 = Mclust(data = data2[2:5], G = 2, modelNames = "VVE")
mixture_g3 = Mclust(data = data2[2:5], G = 3, modelNames = "EVE")
plot(mixture_g2, what = "density", type = "image")
plot(mixture_g2, what = "classification", type = "image")
plot(mixture_g2, what = "density", type = "image")
mix = Mclust(data2[2:5], x = mixtureBIC_g1)
mix
mixture_g1 = Mclust(data = data2[2:5], G = 1, modelNames = "EEE")
mixture_g2 = Mclust(data = data2[2:5], G = 2, modelNames = "VVE")
mixture_g3 = Mclust(data = data2[2:5], G = 3, modelNames = "EVE")
plot(mixture_g2, what = "density", type = "image")
plot(mixture_g3, what = "density", type = "image")
mix3 = Mclust(data[2:5], x = mixtureBIC_g3)
mixture_g1 = Mclust(data = data2[2:5], G = 1, modelNames = "EEE")
mixture_g2 = Mclust(data = data2[2:5], G = 2, modelNames = "VVE")
mixture_g3 = Mclust(data = data2[2:5], modelNames = "EVE")
mix3 = Mclust(data[2:5], x = mixtureBIC_g3)
mixture_g1 = Mclust(data = data2[2:5], G = 1, modelNames = "EEE")
mixture_g2 = Mclust(data = data2[2:5], G = 2, modelNames = "VVE")
mixture_g3 = Mclust(data = data2[2:5], G = 3, modelNames = "EVE")
plot(mixture_g2, what = "density", type = "image")
plot(mixture_g3, what = "density", type = "image")
plot(mixture_g3, what = "classification", type = "image")
plot(mixture_g3, what = "classification", type = "image")
plot(mixture_g3, what = "classification")
plot(mixture_g2, what = "classification")
data2 <- read.csv('Data_A1b.csv', header = TRUE)
mixture_g1$parameters
mixture_g2$parameters
mixture_g3$parameters
mixture_g1 = Mclust(data = data2[2:5], G = 1, modelNames = "EEE")
mixture_g2 = Mclust(data = data2[2:5], G = 2, modelNames = "EEE")
mixture_g3 = Mclust(data = data2[2:5], G = 3, modelNames = "EEE")
mixture_g3$parameters
mixture_g3$parameters
mixture_g1 = Mclust(data = data2[2:5], G = 1, modelNames = "EEE")
mixture_g2 = Mclust(data = data2[2:5], G = 2, modelNames = "EEE")
mixture_g3 = Mclust(data = data2[2:5], G = 3, modelNames = "EEE")
mixture_g2$parameters
mixtureBIC_g1
mixtureBIC_g2
mixtureBIC_g3
mixture_g1 = Mclust(data = data2[2:5], G = 1, modelNames = "EEE")
mixture_g2 = Mclust(data = data2[2:5], G = 2, modelNames = "EEE")
mixture_g3 = Mclust(data = data2[2:5], G = 3, modelNames = "EEE")
plot(mixture_g2, what = "classification")
plot(mixture_g3, what = "classification")
?mclustBootstrapLRT
LRT_test = mclustBootstrapLRT(data[2:5], mdoelName = 'EEE', nboot = 100, G = 2)
?mclustBootstrapLRT
LRT_test = mclustBootstrapLRT(data[2:5], modelName = 'EEE', nboot = 100, G = 2)
LRT_test = mclustBootstrapLRT(data[2:5], modelName = 'EEE', nboot = 100)
LRT_test = mclustBootstrapLRT(data = data[2:5], modelName = 'EEE', nboot = 100)
?mclustBootstrapLRT
LRT_test = mclustBootstrapLRT(data = data2[2:5], modelName = 'EEE', nboot = 100)
?mclustBootstrapLRT
LRT_test = mclustBootstrapLRT(data = data2[2:5], modelName = 'EEE', nboot = 100)
?mclustBootstrapLRT
LRT_test = mclustBootstrapLRT(data = data2[2:5], modelName = 'EEE', nboot = 100)
knitr::opts_chunk$set(echo = TRUE)
library(mclust) #gaussian mixture models
library(ggplot2)
library(GGally)
library(siqr)
setwd("/Users/henrikolaussen/Desktop/Modern-stat/Assignments/Assignment1")
data1 <- read.csv('Data_A1a_v2.csv', header = TRUE)
mod1 <- Mclust(data = data1$x, G = 2, modelNames = 'E') #modelNames = 'E' means equal variance.
mu <- mod1$parameters$mean
proportions <- mod1$parameters$pro
variance <- mod1$parameters$variance$sigmasq
mu
proportions
plot(mod1, what = "density")
N_bins = 7 #number of bins in histogram
hist(data1$x, freq = FALSE, main = 'Histogram', breaks = N_bins, ylim = c(0,0.6))
plot(mod1, what = "density")
#cut-offs
breaks = c(-3,-2,-1,0,1,2,3,4)
bins = cut(data1$x, breaks = breaks)
Oi = table(bins)
Oi
chisq.test(Oi)
?chisq.test
mod2 <- Mclust(data = data1$x, G = 2, modelNames = "V")
mod2$parameters
np_se = MclustBootstrap(mod2, nboot=100, type="bs")
summary(np_se)
p_se = MclustBootstrap(mod2, nboot = 2, type = 'pb')
?MclustBootstrap
summary(p_se, what="se")
data2 <- read.csv('Data_A1b.csv', header = TRUE)
mixtureBIC_g1 = mclustBIC(data2[2:5], G = 1)
mixtureBIC_g2 = mclustBIC(data2[2:5], G = 2)
mixtureBIC_g3 = mclustBIC(data2[2:5], G = 3)
mixtureBIC_g1
mixtureBIC_g2
mixtureBIC_g3
mixture_g1 = Mclust(data = data2[2:5], G = 1, modelNames = "EEE")
mixture_g2 = Mclust(data = data2[2:5], G = 2, modelNames = "EEE")
mixture_g3 = Mclust(data = data2[2:5], G = 3, modelNames = "EEE")
plot(mixture_g2, what = "classification")
plot(mixture_g3, what = "classification")
?mclustBootstrapLRT
LRT_test = mclustBootstrapLRT(data = data2[2:5], modelName = 'EEE', nboot = 100)
LRT_test$p.value
LRT_test$obs
LRT_test$G
LRT_test$G[1]
LRT_test$G[1]
LRT_test$p.value[1]
LRT_test$obs[1]
LRT_test$p.value[1] #under H0
LRT_test$obs[1]
LRT_test = mclustBootstrapLRT(data = data2[2:5], modelName = 'EEE')
LRT_test$p.value[1] #p-value of test when we test H0: g=1 vs H1: g=2.
LRT_test$obs[1] #the LRTS value
LRT_test2 = mclustBootstrapLRT(data = data2[2:5], modelName = 'EEE', nboot = 99)
LRT_test2$p.value
LRT_test2$p.value[2]
BICmod <- mclustBIC(data = data2[2:5], modelNames = 'EEE')
BICmod
BIC_test <- mclustBIC(data = data2[2:5], modelNames = 'EEE')
BICmod
plot(BIC)
plot(BIC_test)
bins_alternatives = cut(data1$x, breaks = 7)
bins_alternatives
table(bins_alternatives)
table(bins)
table(bins_alternatives)
knitr::opts_chunk$set(echo = TRUE)
library(mclust) #gaussian mixture models
library(ggplot2)
library(GGally)
library(siqr)
LRT_test
LRT_test2
mu
proportions
variance
mod1.mu
mod1 <- Mclust(data = data1$x, G = 2, modelNames = 'E') #modelNames = 'E' means equal variance.
mod1.mu <- mod1$parameters$mean
mod1.proportions <- mod1$parameters$pro
mod1.variance <- mod1$parameters$variance$sigmasq
mod1.mu
mod1.proportions
mod1.variance
plot(mod1, what = "density")
N_bins = 7 #number of bins in histogram
hist(data1$x, freq = FALSE, main = 'Histogram', breaks = N_bins, ylim = c(0,0.6))
plot(mod1, what = "density")
dens = mod1.proportions[1] * dnorm(data1$x, mean = mod1.mu[1], sd = mod1.variance[1]) + mod1.proportions[2] * dnorm(data1$x, mean = mod1.mu[2], sd = mod1.variance[2])
N_bins = 7 #number of bins in histogram
bins_alt = cut(data1$x, breaks = N_bins)
hist(data1$x, freq = FALSE, main = 'Histogram', breaks = bins_alt, ylim = c(0,0.6))
hist(data1$x, freq = FALSE, main = 'Histogram', breaks = 7, ylim = c(0,0.6))
plot(mod1, what = "density")
dens = mod1.proportions[1] * dnorm(data1$x, mean = mod1.mu[1], sd = mod1.variance[1]) + mod1.proportions[2] * dnorm(data1$x, mean = mod1.mu[2], sd = mod1.variance[2])
table(bins)
table(bins_alternatives)
dens = mod1.proportions[1] * dnorm(data1$x, mean = mod1.mu[1], sd = mod1.variance[1]) + mod1.proportions[2] * dnorm(data1$x, mean = mod1.mu[2], sd = mod1.variance[2])
dens
dens = mod1.proportions[1] * dnorm(data1$x, mean = mod1.mu[1], sd = mod1.variance[1]) + mod1.proportions[2] * dnorm(data1$x, mean = mod1.mu[2], sd = mod1.variance[2])
dens
knitr::opts_chunk$set(echo = TRUE)
library(mclust) #gaussian mixture models
library(ggplot2)
library(GGally)
library(siqr)
setwd("/Users/henrikolaussen/Desktop/Modern-stat/Assignments/Assignment1")
data1 <- read.csv('Data_A1a_v2.csv', header = TRUE)
mod1 <- Mclust(data = data1$x, G = 2, modelNames = 'E') #modelNames = 'E' means equal variance.
mod1.mu <- mod1$parameters$mean
mod1.proportions <- mod1$parameters$pro
mod1.variance <- mod1$parameters$variance$sigmasq
mod1.mu
mod1.proportions
mod1.variance
plot(mod1, what = "density")
N_bins = 7 #number of bins in histogram
bins_alt = cut(data1$x, breaks = N_bins)
hist(data1$x, freq = FALSE, main = 'Histogram', breaks = 7, ylim = c(0,0.6))
plot(mod1, what = "density")
dens = mod1.proportions[1] * dnorm(data1$x, mean = mod1.mu[1], sd = mod1.variance[1]) + mod1.proportions[2] * dnorm(data1$x, mean = mod1.mu[2], sd = mod1.variance[2])
dens
ggplot(data = data1$x, aes(x = x, y = ))
knitr::opts_chunk$set(echo = TRUE)
library(mclust) #gaussian mixture models
library(ggplot2)
library(GGally)
library(siqr)
summary(hc_init)
hc_init <- hc(data1$x, modelName = 'E')
summary(hc_init)
hc_init <- hc(data1$x, modelName = 'E')
knitr::opts_chunk$set(echo = TRUE)
library(mclust) #gaussian mixture models
library(ggplot2)
library(GGally)
library(siqr)
setwd("/Users/henrikolaussen/Desktop/Modern-stat/Assignments/Assignment1")
data1 <- read.csv('Data_A1a_v2.csv', header = TRUE)
mod1 <- Mclust(data = data1$x, G = 2, modelNames = 'E') #modelNames = 'E' means equal variance.
mod1.mu <- as.data.frame(mod1$parameters$mean)$`mod1$parameters$mean`
mod1.proportions <- mod1$parameters$pro
mod1.variance <- mod1$parameters$variance$sigmasq
print('Mu:')
mod1.mu
print("Proportions: ")
mod1.proportions
print("Variance: ")
mod1.variance
plot(mod1, what = "density")
hc_init <- hc(data1$x, modelName = 'E')
N_bins = 7 #number of bins in histogram
max_data = max(data1$x)
min_data = min(data1$x)
breaks = seq(from = min_data, to = max_data, length.out = N_bins+1)
dens = mod1.proportions[1] * dnorm(data1$x, mean = mod1.mu[1], sd = mod1.variance) + mod1.proportions[2] * dnorm(data1$x, mean = mod1.mu[2], sd = mod1.variance)
hist(data1$x, breaks = breaks, prob = TRUE, ylim = c(0, 0.6))
points(data1$x, dens)
df = data.frame(x = data1$x, dens = dens)
ggplot(df) + geom_histogram(breaks = breaks, aes(x = data1$x, y = ..density..), color = "black", fill = "lightgreen") + geom_density(aes(x=data1$x, y = ..density..))
N = 7
n = 75
d = 4 #number of parameters to be estimated, dim(Psi)
e = list()
o = list()
dens_func <- function(x) {
mod1.proportions[1] * dnorm(x, mean = mod1.mu[1], sd = mod1.variance) + mod1.proportions[2] * dnorm(x, mean = mod1.mu[2], sd = mod1.variance)
}
Q = 0
for (i in 1:N) {
o[[i]] <- length(data1$x[data1$x >= breaks[i] & data1$x <= breaks[i+1]])
e[[i]] <- n * (integrate(dens_func, -Inf, breaks[i+1])$value - integrate(dens_func, -Inf, breaks[i])$value)
Q = Q + (o[[i]]-e[[i]])^2 / e[[i]]
}
p_val <- 1 - pchisq(Q, df = N-1-d)
print('p-value:')
print(p_val)
mod2 <- Mclust(data = data1$x, G = 2, modelNames = "V") #V means unequal variances.
plot(mod2, what = "density")
mod2$parameters
np_se = MclustBootstrap(mod2, nboot=100, type="bs")
summary(np_se)
p_se = MclustBootstrap(mod2, nboot = 2, type = 'pb')
summary(p_se, what="se")
data2 <- read.csv('Data_A1b.csv', header = TRUE)
mixture_g1 = Mclust(data = data2[2:5], G = 1, modelNames = "EEE")
mixture_g2 = Mclust(data = data2[2:5], G = 2, modelNames = "EEE")
mixture_g3 = Mclust(data = data2[2:5], G = 3, modelNames = "EEE")
mixture_g1$parameters
mixture_g2$parameters
mixture_g3$parameters
plot(mixture_g2, what = "classification")
plot(mixture_g3, what = "classification")
LRT_test = mclustBootstrapLRT(data = data2[2:5], modelName = 'EEE')
LRT_test
LRT_test2 = mclustBootstrapLRT(data = data2[2:5], modelName = 'EEE', nboot = 99)
LRT_test2
BIC_test <- mclustBIC(data = data2[2:5], modelNames = 'EEE')
plot(BIC_test)
hc_init <- hc(data1$x, modelName = 'E')
hc_init
hc_init
hc(data2[2:5], modelName = 'EEE')
hc_init <- hclust(data1$x, modelName = 'E')
hc_init <- hc(data1$x, modelName = 'E')
hc_init <- hc(data1$x, modelName = 'E')
plot.hc(
hc_init
)
plot.hc(
hc_init
)
hc_ <- hc(data2[2:5], modelName = 'EEE')
plot.hc(hc_)
hc_init <- hc(data1$x, modelName = 'E')
hc_init
?hc
knitr::opts_chunk$set(echo = TRUE)
library(mclust) #gaussian mixture models
library(ggplot2)
library(GGally)
library(siqr)
setwd("/Users/henrikolaussen/Desktop/Modern-stat/Assignments/Assignment1")
data1 <- read.csv('Data_A1a_v2.csv', header = TRUE)
mod1 <- Mclust(data = data1$x, G = 2, modelNames = 'E') #modelNames = 'E' means equal variance.
mod1.mu <- as.data.frame(mod1$parameters$mean)$`mod1$parameters$mean`
mod1.proportions <- mod1$parameters$pro
mod1.variance <- mod1$parameters$variance$sigmasq
print('Mu:')
mod1.mu
print("Proportions: ")
mod1.proportions
print("Variance: ")
mod1.variance
plot(mod1, what = "density")
?hc
hc_init <- hc(data1$x, modelName = 'E')
hc_init
N_bins = 7 #number of bins in histogram
max_data = max(data1$x)
min_data = min(data1$x)
breaks = seq(from = min_data, to = max_data, length.out = N_bins+1)
dens = mod1.proportions[1] * dnorm(data1$x, mean = mod1.mu[1], sd = mod1.variance) + mod1.proportions[2] * dnorm(data1$x, mean = mod1.mu[2], sd = mod1.variance)
hist(data1$x, breaks = breaks, prob = TRUE, ylim = c(0, 0.6))
points(data1$x, dens)
df = data.frame(x = data1$x, dens = dens)
ggplot(df) + geom_histogram(breaks = breaks, aes(x = data1$x, y = ..density..), color = "black", fill = "lightgreen") + geom_density(aes(x=data1$x, y = ..density..))
N = 7
n = 75
d = 4 #number of parameters to be estimated, dim(Psi)
e = list()
o = list()
dens_func <- function(x) {
mod1.proportions[1] * dnorm(x, mean = mod1.mu[1], sd = mod1.variance) + mod1.proportions[2] * dnorm(x, mean = mod1.mu[2], sd = mod1.variance)
}
Q = 0
for (i in 1:N) {
o[[i]] <- length(data1$x[data1$x >= breaks[i] & data1$x <= breaks[i+1]])
e[[i]] <- n * (integrate(dens_func, -Inf, breaks[i+1])$value - integrate(dens_func, -Inf, breaks[i])$value)
Q = Q + (o[[i]]-e[[i]])^2 / e[[i]]
}
p_val <- 1 - pchisq(Q, df = N-1-d)
print('p-value:')
print(p_val)
mod2 <- Mclust(data = data1$x, G = 2, modelNames = "V") #V means unequal variances.
plot(mod2, what = "density")
mod2$parameters
np_se = MclustBootstrap(mod2, nboot=100, type="bs")
summary(np_se)
p_se = MclustBootstrap(mod2, nboot = 2, type = 'pb')
summary(p_se, what="se")
data2 <- read.csv('Data_A1b.csv', header = TRUE)
mixture_g1 = Mclust(data = data2[2:5], G = 1, modelNames = "EEE")
mixture_g2 = Mclust(data = data2[2:5], G = 2, modelNames = "EEE")
mixture_g3 = Mclust(data = data2[2:5], G = 3, modelNames = "EEE")
mixture_g1$parameters
mixture_g2$parameters
mixture_g3$parameters
plot(mixture_g2, what = "classification")
plot(mixture_g3, what = "classification")
LRT_test = mclustBootstrapLRT(data = data2[2:5], modelName = 'EEE')
LRT_test
LRT_test2 = mclustBootstrapLRT(data = data2[2:5], modelName = 'EEE', nboot = 99)
LRT_test2
BIC_test <- mclustBIC(data = data2[2:5], modelNames = 'EEE')
plot(BIC_test)
